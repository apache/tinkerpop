////
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////
[[gremlin-semantics]]
= Gremlin Semantics

image:tinkerpop-meeting-room.png[]

This section provides details on Gremlin language operational semantics. Describing these semantics and reinforcing
them with tests in the Gremlin test suite makes it easier for providers to implement the language and for the
TinkerPop Community to have better consistency in their user experiences. While the general Gremlin test suite offers
an integrated approach to testing Gremlin queries, the `@StepClassSemantics` oriented tests found
link:https://github.com/apache/tinkerpop/tree/x.y.z/gremlin-test/features[here] are especially focused to the
definitions found in this section. References to the location of specific tests can be found throughout the
sub-sections below.

== Types

The TinkerPop query execution runtime handles the following primitive types:

* Boolean: true or false
* Integer
  ** int8
  ** int16 (short)
  ** int32
  ** int64 (long)
  ** uint8 (byte)
  ** uint16
  ** uint32
  ** uint64
  ** BigInt
* Float
  ** float32
  ** float64 (double)
  *** In Double and Float, we have a concept of INFINITY / https://en.wikipedia.org/wiki/Signed_zero[signed-zero], and NaN.
  ** BigFloat
* String / Char
* UUID
* Date
* `nulltype`
  ** It denotes the "undefined" value.

NOTE: TinkerPop has a bit of a JVM-centric view of types as it was developed within that ecosystem.

Graph providers may not support all of these types depending on the architecture and implementation. Therefore
TinkerPop must provide a way for Graph providers to override the behavior while it has its own default behavior. Also
when some types are not supported Graph providers needs to map unsupported types into supported types internally. This
mapping can be done in either information-preserving manner or non-preserving manner. Graph providers must tell which
mapping they support through `Graph.Features` as well as which types they support.

* Which atomic types are supported
  ** Boolean, Integer, Float, String, UUID and Date
  ** TinkerPop by default supports all of them
* Which integer types are supported
  ** int8, int16, int32, int64, uint8, uint16, uint32, uint64, BigInt
  ** TinkerPop by default supports uint8 (byte), int16 (short), int32 (int), int64 (long) and BigInt
* Which float types are supported
  ** float32, float64 and BigFloat
  ** TinkerPop by default supports all as float, double, and BigDecimal in Java

In addition to these, there are composite types as follows:

* Vertex
* Edge
* VertexProperty
* Property
** Edge property
** Vertex meta property
* PropertyKey
* PropertyValue
* Label
* ID
* Path
* List
* Map
* Set / BulkSet
* Map.Entry (obtained from unfolding a Map)

== Type Casting

TinkerPop performs type casting a.k.a type promotion for Numbers. Numbers are  Byte, Short, Integer, Long, Float,
Double, BigInteger, and BigDecimal. Here is the rule how types are promoted:

* If at least one is BigDecimal then compare as BigDecimal
* If at least one is BigInteger then compare as BigInteger
* If at least one is Double then compare as Double
* If one of them is a Float, then convert both to floating type of highest common bit denomination
** If another value is Long or Double, we need 64bit so convert both to Double
** Otherwise convert both to Float
* If at least one is Long then compare as Long
* If at least one is Integer then compare as Integer
* If at least one is Short then compare as Short
* If at least one is Byte then compare as Byte

BigDecimal and BigInteger may not be supported depending on the language and Storage, therefore the behavior of type
casting for these two types can vary depending on a Graph provider.

== Equality vs. Equivalence

Equality defines when two values are considered equal in the context of database lookups and predicates, while
equivalence defines value collation semantics in the context of, for instance, deduplication. For instance,
equivalence over two values `a := Double.NaN` and `b:= Double.NaN` is true, but equality would (in our proposal) be
defined as false; the rational here (which is commonly found in query and programming languages) is that comparing two
"unknown" numbers — which is a frequent use case for NaN, cannot certainly be identified as equal in comparison, but it
typically makes sense to group them together in, for instance, aggregations.

Both equality and equivalence can be understood as complete, i.e. the result of equality and equivalence checks is
always either `true` or `false` (in particular, it never returns nulltype` or throws an exception). The details on
equality and equivalence are sketched in the following two subsections, respectively.

[[gremlin-semantics-equality]]
=== Equality

* Used by equality and membership predicates (such as `P.eq, `P.neq`, and the list membership `P.within`) in Gremlin.
When this `eq` operator returns `true` for two values (LHS and RHS), by definition LHS and RHS are equal to each other.
* If graph providers need join semantics in query execution, equality should be used to join data over join keys. +
Example:

[code]
----
// equality over two ids
gremlin> g.V().has(id, "some id")
// equality over vertices
gremlin> g.V().as("v").out().out().where(eq("v"))
----

* Equality adheres to type promotion semantics for numerical values, i.e. equality holds for values of different
numerical type if they cast into the exactly same same value of the lowest common super type.
* Other than the type promotion between Numbers, two values of different type are always regarded as not equal.
* Equality checks always return `true` or `false`. They never result in `nulltype` output, undefined behavior, nor do
they ever throw an error.

See: link:https://github.com/apache/tinkerpop/tree/x.y.z/gremlin-test/features/Equality.feature[Equality Tests]

==== Primitive types

===== Number

Number consists of Byte, Short, Integer, Long, Float, Double, BigInteger, and BigDecimal.

* If either one of LHS or RHS is Number and another isn't, eq returns `false`.
* If both LHS and RHS are Number, it follows the type casting described above and then check the equality.
* Example for edge cases:
    ** -0.0 eq 0.0  = `true`
    ** +0.0 eq 0.0 = `true`
    ** -0.0 eq +0.0 = `true`
    ** NaN eq NaN  = `false`
    ** +INF eq +INF = `true`
    ** -INF eq -INF = `true`
    ** -INF eq +INF = `false`
* TinkerPop is JVM based so there can be ±INF^^float and ±INF^^double, NaN^^float and NaN^^double. They also adhere to
the type promotion rules.

See: link:https://github.com/apache/tinkerpop/tree/x.y.z/gremlin-test/features/Equality.feature[Equality Tests - Scenarios prefixed with "Primitives_Number_"]

===== Boolean

* If either one of LHS or RHS is Boolean and another isn't, return `false`
* True != False, True == True, False == False

===== String

* If either one of LHS or RHS is String and another isn't, return `false`
* We assume the common graphical order over unicode strings.
* LHS and RHS needs to be lexicographically equal for LHS eq RHS == `true` for String.

===== UUID

* UUID is evaluated based on its String representation.
* However, for example, UUID("b46d37e9-755c-477e-9ab6-44aabea51d50") and String "b46d37e9-755c-477e-9ab6-44aabea51d50" are not equal to each other.

===== Date

* If either one of LHS or RHS is Date and another isn't, return `false`
* LHS eq RHS == `true` when both LHS and RHS value are numerically identical in Unix Epoch time.

===== nulltype

* If either one of LHS or RHS is `nulltype` and another isn't, return `false`
* If both LHS and RHS are `nulltype`, return `true`

==== Composite types

For all of them, if LHS and RHS is not of the same data type, equality returns `false`. The following semantics applied
when both LHS and RHS has the data type.

===== Vertex / Edge / VertexProperty

They are considered an `Element` family in TinkerPop and if two `Element` objects have the same type and have the same
`T.id`, they are considered as equal.

===== Property

If key and value are same, two properties are equal.

===== PropertyKey

`T.key` is `String` type so equality for String type applies.

===== PropertyValue

Any type, so equality for a corresponding type applies.

===== ID

`T.id` can be any type, so equality for a corresponding type applies.

===== Label

`T.label` is `String` type so equality for `String` type applies.

===== Path

Two `Path` objects are equal when their path elements are equal (using equality of List), and the corresponding path
labels are also equal.

===== List

* Two lists are equal if they contain the same (equal to each other) elements in the same order.

===== Map

* Two maps are equal when a Set of key-value pairs from those two maps are equal to each other. A key-value pair is
equal to another pair if and only if both its key and value are equal to each other.

===== Set

* Two sets are equal if they contain the same (equal to each other) elements.

=== Equivalence

* Equivalence defines how TinkerPop deals with two values to be grouped or de-duplicated. Specifically it is necessary
for the dedup and group steps in Gremlin. +
Example:

[code]
----
// deduplication needs equivalence over two property values
gremlin> g.V().dedup().by("name")
// grouping by equivalence over two property values
gremlin> g.V().group().by("age")
----

* Equivalence ignores type promotion semantics, i.e. two values of different types (e.g. 2^^int vs. 2.0^^float) are
always considered to be non-equivalent. (There is an open question whether equivalence takes type promotion into account).
* For Number,
** Because type promotion is not effective, if the types are different then two numbers are never equivalent
** NaN is not equal to NaN, but equivalent to each other
* Other than the edge case around NaN (and, as of today, Numbers), equivalence in TinkerPop is identical to equality.
* Like equality, equivalence checks always return `true` or `false`. They never result in `nulltype` output, undefined behavior, nor do they ever throw an error.

Equivalence is identical to Equality, except for the cases listed below.

==== Primitive types

===== Number

* Unlike Equality, we *don't do* type casting for Equivalence.
** If the type is different, they are not equivalent.
*** +INF^^double is not equivalent to +INF^^float
*** NaN^^double is not equivalent to NaN^^float
** 123 and 123.0 are equal but not equivalent to each other
* -0.0, 0.0, and +0.0 are not equivalent to each other
** -0.0 is equivalent to -0.0
** 0.0 is equivalent to 0.0
** +0.0 is equivalent to +0.0
* -INF and +INF are not equivalent to each other
** -INF is equivalent to -INF
** +INF is equivalent to +INF
** They are equialavlent to each other irrespective to its underlying type, so in Java, for example, Double.POSITIVE_INFINITY is equivalent to Float.POSITIVE_INFINITY.
* NaN is not equivalent to any other numbers
** NaN *is equivalent to* NaN irrespective to its underlying type, so in Java, for example, Double.NaN is equivalent to Float.NaN.

===== `nulltype`

* `nulltype` is not equivalent to any other values
* `nulltype` is equivalent to `nulltype`

== Comparability vs. Orderability

Comparability and orderability can be understood as the "dual" concepts of equality and equivalence for range
comparisons (rather than exact comparison). For the two values of the same type (except for NaN), comparability is
stronger than orderability in the sense that everything that every order between two values that holds `true` w.r.t.
comparability also holds `true` w.r.t. orderability, but not vice versa. Comparability is what is being used in range
predicates. It is restricted to comparison within the same type or, for numerics, class of types; comparability is
complete within a given type, but returns `nulltype` if the two types are considered incomparable (e.g., an integer
cannot be compared to a string). Orderability fills these gaps, by providing a stable sort order over mixed type
results; it is consistent with comparability within a type, and complete both within and across types, i.e. it will
never return `nulltype` or throw an exception.

More details on comparability and orderability are sketched in the following two subsections, respectively.

=== Comparability

* Used by the comparison operators (`P.gt`, `P.lt`, `P.gte`, `P.lte`) in Gremlin and defines how to compare two values. +
Example:

[code]
----
// comparison over two property values
gremlin> g.E().has("weight", gt(1))
----

* For numbers,
** it should be aligned to equality conceptually as far as type promotion is concerned. e.g. `1.0 < 2 < 3L`
* Comparison should not result in undefined behavior, but can return `nulltype` if and only if we are comparing
incomparable data types. How this `nulltype` result is handled is Graph provider dependent.
* Otherwise Comparison does return `true` or `false`

==== Primitive types

===== Number

* If either one of LHS or RHS is Numbers and another isn’t, throw an Exception. This comes first before the handling for each type.
* If both LHS and RHS are Numbers, try the type casting, and then compare two values.
* For -0.0, 0.0, +0.0, lt and gt returns `false` and lte, gte returns `true` because they are "equal" in this semantics.
* -INF < +INF
* Any comparison between NaN and any numbers (including NaN) should return `false` +
https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.3
* IF `nulltype` and NaN is compared it should return `nulltype` as their "type" is different and they are not comparable.

===== Boolean

* If either one of LHS or RHS is Boolean and another isn’t, throws an Exception
* False < True

===== String

* If either one of LHS or RHS is String and another isn’t, returns `nulltype`.
* We assume the common lexicographical order over unicode strings
* LHS and RHS are compared lexicographically
* UUID is evaluated based on its String representation.

===== UUID

* UUID is evaluated based on its `String` representation.
* However, for example, UUID("b46d37e9-755c-477e-9ab6-44aabea51d50") and String "b46d37e9-755c-477e-9ab6-44aabea51d50" cannot be compared with each other, hence comparing them returns `nulltype`.

===== Date

* If either one of LHS or RHS is Date and another isn’t, throw an Exception
* Compare LHS and RHS based on chronological order, i.e. numerical order in timestamp.

===== `nulltype`

* `nulltype` is not comparable, if the LHS or RHS is `nulltype` then the comparison result is `nulltype`.

==== Composite types

For all of them, if LHS and RHS is not of the same data type, equality returns `false`. The following semantics applied when both LHS and RHS has the data type.

===== Vertex / Edge / VertexProperty

They are not comparable, return `nulltype`.

===== Property

It it not comparable, return `nulltype`.

===== PropertyKey

Comparability of String applies.

===== PropertyValue

Property values are of any primitive types defined, so comparability for a corresponding type applies.

===== ID

IDs are of any primitive types defined, so comparability for a corresponding type applies.

===== Label

Comparability of String applies.

===== Path

It is not comparable, throw an Exception.

===== List

It is not comparable, throw an Exception.

===== Map

It is not comparable, throw an Exception.

===== Map.Entry

It is not comparable, throw an Exception.

===== Set

It is not comparable, throw an Exception.

=== Orderability

* Used to determine the order. In TinkerPop, the order step follows the notion of orderability.
* Orderability must not result in `nulltype` / undefined behavior.
* Orderability must not throw an error. In other words, even if two values are incomparable we should still be able to
determine the order of those two. This inevitably leads to the requirement to define the order across different data
types. For the detailed order across types, see appendix.
* Orderability determines if two values are ordered at the same position or one value is positioned earlier than another.
* The concept of equivalence is used to determine if the two values are at the same position
* When the position is identical, which value comes first (in other words, whether it should perform stable sort)
depends on graph providers' implementation.
* For values of the same type, comparability can be used to determine which comes first except for `NaN` in Number.
For a different type, we have a dedicated order as described in the section below.

To sort across any types of values, we define the order between each type as follows:
(In this order, ID, label, property key and property value are considered as a part of primitive types)

* `nulltype`
* Boolean
* Number
* Date
* String
* Vertex
* Edge
* VertexProperty
* Property
* Path
* List
* Map

==== Primitive types

===== Number

* Same applies as Comparability. Exceptions are as below:
** NaN is ordered at a larger index among all Numbers. i.e. after +INF.
* We do type promotion for orderability as we do for comparability.

===== Boolean

* False < True

===== String

* String value is ordered lexicographically

===== UUID

* UUID is ordered lexicographically based on its String representation

===== Date

* Date value is ordered chronologically

===== `nulltype`

* `nulltype` is before all value types

==== Composite types

===== Vertex / Edge / VertexProperty

They are ordered by their ID. The ID is chosen internally by the implementation, so ordering is implementation specific, but is guaranteed to be stable.

===== Property

They are ordered by property key. If the key is equal, then property value is used as the second key.

===== PropertyKey

Comparability of String applies.

===== PropertyValue

Property values are of any primitive types defined, so orderability for a corresponding type applies.

===== ID

IDs are of any primitive types defined, so orderability for a corresponding type applies.

===== Label

Comparability of String applies.

===== Path

* Orderability of the 1st element in the Path applies. Empty Path should come first.
* If the 1st element is tie, then check the next element, and so on.
* If one Path exhausts the element fast then it comes earlier in the order.

===== List

* Orderability of the 1st element in the List applies.
* Empty List should come first.
* If the 1st element is tie, then check the next element, and so on.
* If one List exhausts the element fast then it comes earlier in the order.

===== Map

* For two maps, get the 1st entry (a key-value pair) from both, the orderability between them decides the order of the maps.
* If the 1st entry is tie, then we pick the second one and repeat the process until we determine the order.
    ** So the orderability of Map depends on in which order they return an entry. It is implementation dependent and undefined in this semantics.
* If one Map exhausts an entry earlier than another, then it comes earlier in the order.

===== Map.Entry

* First check the orderability of their key.
* If the key ties, then check the orderability of their value.

===== Set

* For two sets, get the 1st item from both, the orderability between them decides the order of the sets.
* If the first item is tie, we pick the second one and so on until we determine the order.
    ** So the orderability of Set depends on in which order they return an item. It is implementation dependent and undefined in this semantics.
* If one Set exhausts an item earlier than another, then it comes earlier in the order.

=== Mapping for P

The following table maps the notions proposed above to the various `P` operators:

[%header]
|================
|Construct|Concept
|P.eq     |Equality
|P.neq    |Equality
|P.within |Equality
|P.without|Equality
|P.lt     |Comparability
|P.gt     |Comparability
|P.lte    |Equality, Comparability
|P.gte    |Equality, Comparability
|P.inside |Comparability
|P.outside|Comparability
|P.between|Equality, Comparability
|================