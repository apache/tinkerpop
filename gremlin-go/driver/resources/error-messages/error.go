// Code generated for package bindata_error by go-bindata DO NOT EDIT. (@generated)
// sources:
// resources/error-messages/en.json
package bindata_error

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x4d\x6f\xe3\xba\x15\xdd\xcf\xaf\xb8\x18\x20\xc8\xa2\x99\x07\xd9\xb2\x93\x8c\x81\x2e\x14\x9b\x49\xd4\x51\x24\x57\xa2\xf3\x26\xdd\x08\xb4\x44\x8f\xd5\x91\x49\x3f\x92\x4a\xe2\x16\xfd\xef\x05\x49\x59\x94\x12\xa7\xef\x15\xed\xca\xb0\x44\x9e\x73\xee\x27\x79\xf5\xcf\x4f\x00\x9f\x91\x37\xf2\x46\xf9\x3c\x89\x63\x34\xc7\x61\x12\xe7\xf3\x28\xc9\x50\x8e\xd2\x34\x49\x3f\xcf\xda\xf7\x33\x28\x08\x63\x5c\x41\x51\x73\x49\xa1\xe0\x8c\xd1\x42\x55\x9c\x81\xda\x12\x05\x5b\x22\x81\xd4\x82\x92\xf2\x00\x6b\x4a\x99\x5d\x56\x02\x17\xe6\x95\xde\x68\x1f\xdb\x7d\xb4\xfc\x7c\x71\xa4\x1e\xf7\xa9\x7f\x4d\x43\x8c\xac\x80\xc5\x50\xc1\xb8\x53\xf0\x22\x2a\x45\x41\xf1\xff\xa7\x08\xbf\x27\x62\x99\x24\xd1\x49\x09\x7e\x27\xa1\x62\xcf\xfc\x27\x85\x1d\x55\x5b\x5e\x4a\x20\x1b\x45\x45\x4f\x8e\x04\x22\x68\xcb\xee\x38\x26\x6f\x39\xc2\x38\xc3\x41\x8c\xc3\x00\xa3\xfc\x36\x08\xa3\x23\xcf\x64\x06\x8c\x83\x6c\x8a\x82\x4a\xb9\x69\xea\x01\x72\xc1\x9b\xba\x84\x35\x85\x1d\x29\xe9\x0c\xce\xa4\x23\x98\xbe\x25\xb8\x5d\x45\x51\x1e\x27\x31\xca\x1f\x83\x28\x5c\x1c\xf1\xa7\x06\xff\x99\xd4\x55\x39\x80\xde\xf0\x86\x95\x40\x58\x09\x3b\xf2\x5a\xed\x9a\x9d\x7e\x5b\x34\x42\x50\xa6\xfa\xce\x2e\x78\xc3\x14\x08\x4a\x8a\xad\xb1\xcf\xf2\x8f\xbd\x51\xbe\x48\xc3\x47\x94\xe6\x29\x7a\x48\x74\x18\x7b\x29\x95\xa2\x00\xa3\x0c\x65\x99\xfe\xf7\xb0\x8a\x70\xb8\x8c\x50\xbe\x5a\x85\x8b\xac\xef\xe4\xb1\xce\xb4\x1d\x17\x54\x47\x94\x01\x67\x14\x32\x2a\xa5\x66\x0d\x17\x20\xf7\xb4\xa8\x36\x15\x2d\x7f\x81\x79\x9b\x8d\x82\x12\xe5\xd6\xbc\x54\x6a\x0b\xbb\xa6\x56\xd5\xbe\xa6\xa0\xd1\x3b\xf7\x8c\xbd\xf1\x1f\x95\x77\xfc\xbd\x4d\x93\x87\xee\xcf\x40\xa4\x4e\x46\xe7\x8f\xaa\x97\x76\xc6\x85\x8a\x03\xe9\x34\x7d\x81\x62\x5b\xd5\x25\x48\xfb\xdf\xe6\x86\xd6\x4e\xea\x9a\xbf\xb8\x04\x19\x7b\xfe\xc7\x02\xb3\xd5\xcd\x43\x88\x6f\x9e\x30\x9a\x27\x0b\x94\xe3\xe4\x98\xa0\xbd\x35\x03\x85\x2e\x57\x65\xb3\xde\x55\x0a\xd6\x07\x45\x0b\x5e\xda\xc2\xb1\x75\xe1\x4c\xe8\x82\xe8\x7b\xa3\xfc\x2e\x0d\x96\xf7\xf9\x1d\xc2\xcb\x00\xdf\x27\x37\x7f\x41\x73\x9c\xaf\x62\xf4\xd7\x55\x10\xe5\x51\x70\x83\xa2\x2c\xb7\x4f\xb3\x3c\x42\xf1\x1d\xbe\xef\x33\xfb\x3a\x80\x7b\xa2\xb6\xda\x2b\x15\xb3\x49\xb6\xa6\x05\x69\x24\x85\x4a\x41\xc9\xa9\xad\xc4\x82\x33\x45\x2a\x06\x84\x01\xfd\xad\x21\x35\xb0\x66\xb7\xa6\x02\xf8\x06\x22\xb2\xa6\xb5\x34\x89\x98\xac\xff\x4e\x0b\xd5\x05\xd1\xf7\xc6\x27\xe5\xc5\xda\x45\x38\x0d\xe3\x3b\x9d\xe9\x2b\x94\x87\xf1\x51\xea\x40\xdb\xf8\x63\x6d\xb5\x25\x6d\x65\x49\x20\xc0\x38\x03\xa9\x44\xc5\x7e\x80\x3a\xec\xa9\xd3\xe0\x7f\xa0\xc1\x52\x0e\x19\xfd\x96\xf1\xbd\xdd\xd6\x4c\x6d\xef\xf9\x99\x3c\xef\x22\x30\xe9\x22\x70\x13\xc6\x41\xfa\x64\x5b\x22\x7e\x5a\x22\x6b\xd9\x2a\x46\xdf\x97\x68\x8e\xd1\x22\x8f\x75\x79\xb7\x6c\x76\xe7\x0c\x1a\x46\x5f\xf7\xa6\xb9\x01\x6b\xea\x5a\x57\x79\x63\x62\x6e\xba\x26\x3e\xec\xe9\xa3\x79\xf2\xb2\xa5\xcc\xac\x20\xeb\x9a\x6a\x7f\x6c\x48\x2d\x3b\x1b\x27\x9d\x9f\xfb\x22\xd2\xbc\x4b\xc0\x9e\x8d\x13\xed\x55\x46\x69\x09\x77\x82\xec\xb7\x58\x90\x67\x2a\x24\xa9\x75\xdb\xed\x27\x9d\x6d\xdb\xc7\x27\x8e\xc9\x3f\xc1\xf4\xfb\xa6\xfa\xbf\x67\xea\x1f\x33\x73\x32\x24\x4f\x51\x60\xb9\xb4\xbf\x87\x46\x4e\x66\xd0\xd1\x55\x32\xd6\x84\xc5\x96\x16\x3f\x35\xe1\x9a\x82\x12\x0d\x85\x0d\x17\xa0\xdf\xe0\x5e\xba\x4c\xbc\xe9\x7b\x0e\x6b\x9f\x31\x2a\x8c\x97\x2b\x3c\x30\x6d\x3a\x83\x8a\xed\x1b\x75\x2c\xe0\x35\x35\x16\x38\xc0\xcb\x21\x20\x8a\x57\x0f\x1a\x14\xa5\x79\x18\x9b\x46\x9f\xbf\x97\x7f\x39\x03\x2a\x04\x17\x17\xce\x8a\x5e\x6e\x1b\xe5\x94\x35\xbb\x0b\x58\x37\x0a\x7e\x70\x05\x67\xf0\xea\x18\xaf\x86\x8c\x77\x08\x67\x28\x0d\x83\x28\xfc\x1b\x4a\x71\x62\x0f\xed\x55\xfc\x2d\x4e\x7e\x8d\x07\xdc\x76\xb3\x0e\xd5\x4f\xc6\x5f\x18\x94\x44\x11\x4b\xa8\x38\x48\x2a\x2a\x52\x57\xff\xa0\xbd\x43\x6c\xe2\x5d\xff\x47\x2a\x13\xa0\x53\x4c\xed\xe6\x0f\xa8\x4a\xea\xc8\xbc\xd7\xb3\xd7\xae\xda\xa6\xde\x28\x5f\xa6\x09\x4e\xe6\x49\x94\xa7\x28\x5b\x26\x71\x86\xee\x83\x78\x11\xa1\x54\x57\x74\x8a\xb2\x55\x84\x33\x84\xf3\x24\xce\x17\x01\x0e\xf2\x14\xcd\x51\xf8\x88\x8c\x6d\x53\x5d\x71\x82\xca\xa6\x56\x19\x55\xf0\xd2\x5e\x32\xec\xa1\xa4\x5b\xcb\x46\x9f\x64\x46\x89\x7e\x27\x68\x41\xab\x67\xd7\xf1\xa7\xde\xf8\x63\x72\x63\x69\x94\x24\xcb\xbe\x85\x53\x5d\x6b\x26\x8e\x50\x31\x7d\x02\x97\x50\x73\xbe\xbf\x68\x9f\xed\xa8\x94\xe4\x07\x85\xf3\xb3\x3f\x3d\x9f\xff\x02\x52\x11\xd5\xc8\x39\x37\xf7\x84\x1e\xab\xff\x31\x6b\xb0\x72\xed\xdc\xae\x9d\xc1\x86\x54\x35\xb5\x87\x5a\xa3\xb6\x94\xa9\xaa\xd0\x67\xee\xd9\x33\xcc\xe0\xec\xb9\x73\xe5\xa5\x37\x6a\xdd\x95\xc7\x09\xce\x1f\x51\x8a\xd1\xf7\x1e\xd6\xa5\x73\x96\x2e\x44\x73\x02\xc2\x23\x15\x8a\x76\x89\x76\xe9\x8d\xfb\x10\x68\x71\x37\x88\xef\xa5\xb6\xfe\x0d\x02\x03\x54\xfe\xa0\x0e\xc0\x1f\x00\x44\xe8\x01\xc5\x78\x20\xc2\x3f\x05\x51\xd3\x1d\x65\xca\xa1\x4c\xfa\x28\xba\xc7\x0f\x65\x4c\xde\x1b\xb2\x24\x6a\xeb\xf6\x4f\x07\xfb\xd3\x64\x89\x52\xfc\x34\x90\x31\x3d\x01\x21\xf8\x9e\x0a\x75\x70\x30\x97\x27\x1c\xfa\x16\xad\x5d\xf9\x91\x6b\xdf\x83\x5e\xf5\x41\x71\x1a\x3c\xa2\x34\x43\xe9\x40\xdc\xd5\x7b\xb4\xb6\xad\x53\xe1\x80\xae\xfb\x40\x59\x14\xce\xdf\x04\xeb\xfa\x3d\x4a\x56\x57\x05\xed\x32\xe6\xca\x1b\xe5\xae\xb8\x4d\xc6\x3f\x04\x4b\xdb\x16\xbf\xa1\xbe\xbf\xae\x74\xee\xb8\x6e\xcf\xd9\x17\xd3\xf1\xbf\xd1\x83\xe9\x5c\x3b\xb2\x3f\xca\xba\xf2\xfc\x93\x98\xee\x82\xf0\x16\xd9\x9f\xbd\x6b\x89\x3d\xdc\x0b\xd3\x0c\x75\x1f\xf9\xf3\xb9\xee\x1c\xe7\x8e\x68\xd2\x27\x9a\x27\xb1\x0e\x50\x90\xde\x65\xba\x6f\xf4\xde\xf4\x7c\x72\xa5\x33\xc7\x95\xd3\xa6\x62\xa5\xeb\x82\xc2\x50\x9a\x8e\x75\xf6\x5b\xe7\xa3\x6b\x6f\xa4\x83\x14\x67\xcb\x24\xc5\x28\xbd\x0d\xe6\x38\xb1\x6d\xb1\x7b\x1a\x05\x4f\xb6\x59\xbd\xe9\xbc\xd7\xda\x69\x4a\x10\x26\xf7\x5c\x28\xa8\xc9\x81\xb6\xf8\xc7\x46\xd5\xdd\xa7\xcd\x5d\xcb\x1d\x37\x15\xab\x94\x15\xe5\xae\xf7\x5f\xad\x10\x9d\x2d\x41\x94\xe3\x24\x0a\x33\x9c\x07\xda\xaf\xee\xa9\xe3\xfe\xda\x9b\x18\xdb\x61\x49\x6d\x2b\xd9\x4e\x4c\xb0\x11\x7c\xa7\x0b\x8f\x30\xce\x0e\x3b\xde\x48\xad\xd3\x5e\x1b\x8e\xfe\xfd\xea\x8d\x7b\xc8\xfa\xf6\xa1\xc7\xa4\xd3\x84\xed\xfa\xff\x99\xd1\xef\x41\xc7\xe8\x3b\xee\x9d\x00\x79\x84\x6e\xf1\xc0\x40\x7f\x06\x6a\x4b\x05\x6d\xef\xf3\x6d\xae\x4b\xa8\xe9\x46\x1d\xbd\x36\xf2\xbc\x91\xbb\x34\xcd\xef\xc3\x68\x91\xdb\x7a\x31\x86\x38\xf9\x7a\xa1\xc1\x6b\x87\x85\x4e\x5c\x2f\x56\xe4\x85\x99\x48\xb5\x06\xd4\x07\xf8\x02\xfa\xe6\xaa\x77\xe1\x3c\x87\xa2\x26\x52\x82\x20\x5a\x95\x1d\x9f\xba\xb2\x25\x75\xc6\x1b\x51\x1c\xa7\x66\xa9\x44\x53\xa8\x53\x74\x9d\xf0\xd1\x31\xef\x02\x3b\x5c\xa4\x68\xa9\x47\xa4\x45\x9e\x2c\xd1\x40\xf8\xa8\xcb\x32\x62\xa7\xa1\xe3\x28\x24\x15\x11\xba\xa6\xcc\x74\x5e\x49\xe0\xe6\x2a\xdf\x3a\x7b\x34\xb2\xe1\x75\xf8\x49\x14\xdd\x04\xf3\x6f\xc6\x39\x9a\x63\x30\x7c\x8f\xfa\xf3\xbf\xe0\x75\xbd\x26\xc5\x4f\x20\x03\x5e\xf3\x09\xa0\xed\x34\x2d\xb7\x23\xf3\x07\x64\xf3\xe4\xe1\x21\xc4\x1f\x52\xb9\xd9\xa9\xe0\x3b\x3d\x3b\xfd\x17\x44\x93\xd3\x5e\x7b\xfb\x49\x65\x64\xa6\xfc\xc1\x27\x95\x13\x24\x5b\x22\x61\x2f\xe8\x73\x65\xc3\xdd\xfb\xa6\xf1\xf9\xd3\xbf\x3e\xfd\x3b\x00\x00\xff\xff\x31\x20\x89\xa2\xbd\x11\x00\x00")

func enJsonBytes() ([]byte, error) {
	return bindataRead(
		_enJson,
		"en.json",
	)
}

func enJson() (*asset, error) {
	bytes, err := enJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "en.json", size: 4541, mode: os.FileMode(420), modTime: time.Unix(1665760938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"en.json": enJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"en.json": &bintree{enJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
